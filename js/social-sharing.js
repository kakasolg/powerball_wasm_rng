/**
 * üì± Social Sharing Manager - Quantum Number Broadcasting
 * Powerball Superposition - Share your cosmic lottery destiny
 */

class SocialSharingManager {
    constructor() {
        this.platform = 'web';
        this.shareTemplates = new Map();
        this.shareHistory = [];
        this.analyticsEnabled = true;
        
        console.log('üì± Social Sharing Manager initializing...');
        this.initializeSharing();
    }

    /**
     * Initialize social sharing capabilities
     */
    initializeSharing() {
        this.loadShareTemplates();
        this.detectPlatform();
        this.setupEventListeners();
        console.log('üì± Social sharing ready! Prepare to broadcast your quantum destiny!');
    }

    /**
     * Load share message templates
     */
    loadShareTemplates() {
        this.shareTemplates.set('numbers', [
            "üé≤ Just generated quantum Powerball numbers: {numbers} using superposition! Will the universe align? #PowerballSuperposition #QuantumLuck",
            "‚öõÔ∏è My cosmic lottery numbers are: {numbers} - generated through quantum entanglement! #QuantumPowerball #CosmicDestiny",
            "üåå The quantum field has spoken! My Powerball numbers: {numbers} #PowerballQuantum #LotteryMagic",
            "üîÆ Channeled these numbers from the quantum realm: {numbers} - feeling lucky! #QuantumNumbers #PowerballVibes",
            "‚ú® My quantum-generated Powerball destiny: {numbers} - may the odds be ever in quantum favor! #PowerballSuperposition"
        ]);

        this.shareTemplates.set('win', [
            "üéâ QUANTUM JACKPOT! My superposition-generated numbers {numbers} just hit! The universe has aligned! #QuantumWinner #PowerballSuperposition",
            "‚öõÔ∏è HOLY QUANTUM ENTANGLEMENT! Won with numbers {numbers} generated by quantum superposition! #QuantumLottery #PowerballWin",
            "üåü The cosmic forces were with me! Quantum numbers {numbers} = WINNER! #QuantumDestiny #PowerballJackpot"
        ]);

        this.shareTemplates.set('analysis', [
            "üîç Just analyzed my Powerball numbers using quantum pattern recognition! Similarity score: {score}% #QuantumAnalysis #PowerballScience",
            "üìä Quantum similarity analysis complete! My numbers have {score}% cosmic resonance! #PowerballQuantum #NumberScience",
            "üß† The quantum analyzer says my numbers have {score}% pattern alignment! #QuantumPowerball #DataDriven"
        ]);

        this.shareTemplates.set('app', [
            "üöÄ Discovered this amazing Powerball Quantum Generator! Generate lottery numbers using quantum superposition! {url} #PowerballSuperposition #QuantumLottery",
            "‚öõÔ∏è This quantum Powerball generator is mind-blowing! Using real quantum mechanics for lottery numbers! {url} #QuantumPowerball #TechMagic",
            "üé≤ Found the future of lottery number generation! Quantum superposition meets Powerball! {url} #PowerballQuantum #Innovation"
        ]);

        console.log('üìù Share templates loaded for all scenarios!');
    }

    /**
     * Detect platform capabilities
     */
    detectPlatform() {
        if (typeof navigator !== 'undefined') {
            if (navigator.share) {
                this.platform = 'native';
                console.log('üì± Native sharing API detected!');
            } else {
                this.platform = 'web';
                console.log('üåê Web sharing fallback active!');
            }
        }
    }

    /**
     * Setup event listeners for share buttons
     */
    setupEventListeners() {
        // Auto-detect and setup share buttons
        document.addEventListener('DOMContentLoaded', () => {
            const shareButtons = document.querySelectorAll('[data-share]');
            shareButtons.forEach(button => {
                button.addEventListener('click', (e) => {
                    e.preventDefault();
                    const shareType = button.dataset.share;
                    const shareData = button.dataset.shareData ? JSON.parse(button.dataset.shareData) : {};
                    this.share(shareType, shareData);
                });
            });
            console.log(`üì± ${shareButtons.length} share buttons initialized!`);
        });
    }

    /**
     * Main share function
     */
    async share(type, data = {}) {
        try {
            const shareContent = this.generateShareContent(type, data);
            
            if (this.platform === 'native' && navigator.share) {
                await this.nativeShare(shareContent);
            } else {
                await this.fallbackShare(shareContent);
            }
            
            this.trackShare(type, data, 'success');
            console.log('üì± Share completed successfully!');
            
        } catch (error) {
            console.error('üì± Share failed:', error);
            this.trackShare(type, data, 'error');
            this.showShareError(error);
        }
    }

    /**
     * Generate share content based on type
     */
    generateShareContent(type, data) {
        const templates = this.shareTemplates.get(type) || this.shareTemplates.get('app');
        const template = templates[Math.floor(Math.random() * templates.length)];
        
        let content = {
            title: 'Powerball Superposition - Quantum Number Generator',
            text: template,
            url: window.location.href
        };

        // Replace placeholders
        if (data.numbers) {
            content.text = content.text.replace('{numbers}', data.numbers.join(', '));
        }
        
        if (data.score) {
            content.text = content.text.replace('{score}', Math.round(data.score));
        }
        
        if (data.url) {
            content.url = data.url;
            content.text = content.text.replace('{url}', data.url);
        }

        return content;
    }

    /**
     * Native sharing API
     */
    async nativeShare(content) {
        if (navigator.share) {
            await navigator.share({
                title: content.title,
                text: content.text,
                url: content.url
            });
        } else {
            throw new Error('Native sharing not supported');
        }
    }

    /**
     * Fallback sharing methods
     */
    async fallbackShare(content) {
        const shareOptions = this.createShareModal(content);
        this.showShareModal(shareOptions);
    }

    /**
     * Create share modal with platform options
     */
    createShareModal(content) {
        const encodedText = encodeURIComponent(content.text);
        const encodedUrl = encodeURIComponent(content.url);
        const encodedTitle = encodeURIComponent(content.title);

        return [
            {
                name: 'Twitter',
                icon: 'üê¶',
                url: `https://twitter.com/intent/tweet?text=${encodedText}&url=${encodedUrl}`,
                color: '#1DA1F2'
            },
            {
                name: 'Facebook',
                icon: 'üìò',
                url: `https://www.facebook.com/sharer/sharer.php?u=${encodedUrl}&quote=${encodedText}`,
                color: '#4267B2'
            },
            {
                name: 'Reddit',
                icon: 'üî¥',
                url: `https://reddit.com/submit?title=${encodedTitle}&url=${encodedUrl}`,
                color: '#FF4500'
            },
            {
                name: 'WhatsApp',
                icon: 'üí¨',
                url: `https://wa.me/?text=${encodedText}%20${encodedUrl}`,
                color: '#25D366'
            },
            {
                name: 'Telegram',
                icon: '‚úàÔ∏è',
                url: `https://t.me/share/url?url=${encodedUrl}&text=${encodedText}`,
                color: '#0088cc'
            },
            {
                name: 'Copy Link',
                icon: 'üìã',
                action: 'copy',
                text: content.text + ' ' + content.url,
                color: '#6c757d'
            }
        ];
    }

    /**
     * Show share modal
     */
    showShareModal(options) {
        // Remove existing modal
        const existingModal = document.getElementById('quantum-share-modal');
        if (existingModal) {
            existingModal.remove();
        }

        // Create modal
        const modal = document.createElement('div');
        modal.id = 'quantum-share-modal';
        modal.innerHTML = `
            <div class="quantum-share-overlay">
                <div class="quantum-share-modal">
                    <div class="quantum-share-header">
                        <h3>üì± Share Your Quantum Numbers</h3>
                        <button class="quantum-share-close">&times;</button>
                    </div>
                    <div class="quantum-share-options">
                        ${options.map(option => `
                            <button class="quantum-share-option" 
                                    data-platform="${option.name}"
                                    data-url="${option.url || ''}"
                                    data-action="${option.action || 'open'}"
                                    data-text="${option.text || ''}"
                                    style="border-left: 4px solid ${option.color}">
                                <span class="quantum-share-icon">${option.icon}</span>
                                <span class="quantum-share-name">${option.name}</span>
                            </button>
                        `).join('')}
                    </div>
                </div>
            </div>
        `;

        // Add styles
        this.addShareModalStyles();

        // Add to page
        document.body.appendChild(modal);

        // Setup event listeners
        this.setupModalListeners(modal);

        // Show with animation
        setTimeout(() => modal.classList.add('quantum-share-show'), 10);
    }

    /**
     * Add CSS styles for share modal
     */
    addShareModalStyles() {
        if (document.getElementById('quantum-share-styles')) return;

        const styles = document.createElement('style');
        styles.id = 'quantum-share-styles';
        styles.textContent = `
            .quantum-share-overlay {
                position: fixed;
                top: 0;
                left: 0;
                right: 0;
                bottom: 0;
                background: rgba(0, 0, 0, 0.8);
                backdrop-filter: blur(10px);
                z-index: 10000;
                display: flex;
                align-items: center;
                justify-content: center;
                opacity: 0;
                transition: opacity 0.3s ease;
            }
            
            .quantum-share-show .quantum-share-overlay {
                opacity: 1;
            }
            
            .quantum-share-modal {
                background: linear-gradient(135deg, #1a1a2e, #16213e);
                border-radius: 20px;
                padding: 20px;
                max-width: 400px;
                width: 90%;
                max-height: 80vh;
                overflow-y: auto;
                border: 1px solid #0ff;
                box-shadow: 0 20px 40px rgba(0, 255, 255, 0.3);
                transform: scale(0.8);
                transition: transform 0.3s ease;
            }
            
            .quantum-share-show .quantum-share-modal {
                transform: scale(1);
            }
            
            .quantum-share-header {
                display: flex;
                justify-content: space-between;
                align-items: center;
                margin-bottom: 20px;
                border-bottom: 1px solid #0ff;
                padding-bottom: 10px;
            }
            
            .quantum-share-header h3 {
                margin: 0;
                color: #0ff;
                font-size: 1.2em;
            }
            
            .quantum-share-close {
                background: none;
                border: none;
                color: #0ff;
                font-size: 24px;
                cursor: pointer;
                padding: 0;
                width: 30px;
                height: 30px;
                display: flex;
                align-items: center;
                justify-content: center;
                border-radius: 50%;
                transition: background-color 0.2s;
            }
            
            .quantum-share-close:hover {
                background-color: rgba(0, 255, 255, 0.1);
            }
            
            .quantum-share-options {
                display: grid;
                gap: 10px;
            }
            
            .quantum-share-option {
                display: flex;
                align-items: center;
                padding: 12px;
                background: rgba(255, 255, 255, 0.05);
                border: 1px solid rgba(255, 255, 255, 0.1);
                border-radius: 10px;
                color: white;
                text-decoration: none;
                cursor: pointer;
                transition: all 0.2s ease;
                font-size: 14px;
            }
            
            .quantum-share-option:hover {
                background: rgba(255, 255, 255, 0.1);
                transform: translateX(5px);
            }
            
            .quantum-share-icon {
                font-size: 20px;
                margin-right: 12px;
                width: 24px;
                text-align: center;
            }
            
            .quantum-share-name {
                font-weight: 500;
            }
        `;
        
        document.head.appendChild(styles);
    }

    /**
     * Setup modal event listeners
     */
    setupModalListeners(modal) {
        // Close button
        const closeBtn = modal.querySelector('.quantum-share-close');
        closeBtn.addEventListener('click', () => this.closeShareModal(modal));

        // Overlay click
        const overlay = modal.querySelector('.quantum-share-overlay');
        overlay.addEventListener('click', (e) => {
            if (e.target === overlay) {
                this.closeShareModal(modal);
            }
        });

        // Share options
        const options = modal.querySelectorAll('.quantum-share-option');
        options.forEach(option => {
            option.addEventListener('click', () => {
                const platform = option.dataset.platform;
                const url = option.dataset.url;
                const action = option.dataset.action;
                const text = option.dataset.text;

                if (action === 'copy') {
                    this.copyToClipboard(text);
                    this.showCopySuccess(option);
                } else if (url) {
                    window.open(url, '_blank', 'width=600,height=400');
                    this.closeShareModal(modal);
                }
            });
        });

        // Escape key
        document.addEventListener('keydown', (e) => {
            if (e.key === 'Escape') {
                this.closeShareModal(modal);
            }
        });
    }

    /**
     * Close share modal
     */
    closeShareModal(modal) {
        modal.classList.remove('quantum-share-show');
        setTimeout(() => {
            if (modal.parentNode) {
                modal.parentNode.removeChild(modal);
            }
        }, 300);
    }

    /**
     * Copy text to clipboard
     */
    async copyToClipboard(text) {
        try {
            if (navigator.clipboard) {
                await navigator.clipboard.writeText(text);
            } else {
                // Fallback for older browsers
                const textArea = document.createElement('textarea');
                textArea.value = text;
                document.body.appendChild(textArea);
                textArea.select();
                document.execCommand('copy');
                document.body.removeChild(textArea);
            }
            console.log('üìã Text copied to clipboard!');
        } catch (error) {
            console.error('üìã Copy failed:', error);
            throw error;
        }
    }

    /**
     * Show copy success feedback
     */
    showCopySuccess(button) {
        const originalText = button.innerHTML;
        button.innerHTML = '<span class="quantum-share-icon">‚úÖ</span><span class="quantum-share-name">Copied!</span>';
        button.style.background = 'rgba(40, 167, 69, 0.2)';
        
        setTimeout(() => {
            button.innerHTML = originalText;
            button.style.background = '';
        }, 2000);
    }

    /**
     * Show share error
     */
    showShareError(error) {
        console.error('Share error:', error);
        // Could show a toast notification here
    }

    /**
     * Track sharing analytics
     */
    trackShare(type, data, status) {
        if (!this.analyticsEnabled) return;

        const shareEvent = {
            timestamp: new Date(),
            type: type,
            platform: this.platform,
            status: status,
            data: data
        };

        this.shareHistory.push(shareEvent);
        
        // Keep only last 50 share events
        if (this.shareHistory.length > 50) {
            this.shareHistory.shift();
        }

        console.log('üìä Share tracked:', shareEvent);
    }

    /**
     * Get sharing statistics
     */
    getShareStats() {
        const totalShares = this.shareHistory.length;
        const successfulShares = this.shareHistory.filter(s => s.status === 'success').length;
        const platformBreakdown = {};
        const typeBreakdown = {};

        this.shareHistory.forEach(share => {
            platformBreakdown[share.platform] = (platformBreakdown[share.platform] || 0) + 1;
            typeBreakdown[share.type] = (typeBreakdown[share.type] || 0) + 1;
        });

        return {
            totalShares,
            successfulShares,
            successRate: totalShares > 0 ? (successfulShares / totalShares) * 100 : 0,
            platformBreakdown,
            typeBreakdown,
            lastShare: this.shareHistory.length > 0 ? this.shareHistory[this.shareHistory.length - 1] : null
        };
    }

    /**
     * Quick share methods for common scenarios
     */
    shareNumbers(numbers) {
        return this.share('numbers', { numbers });
    }

    shareWin(numbers) {
        return this.share('win', { numbers });
    }

    shareAnalysis(score) {
        return this.share('analysis', { score });
    }

    shareApp() {
        return this.share('app', { url: window.location.href });
    }
}

// Initialize global social sharing manager
window.SocialSharingManager = SocialSharingManager;

// Auto-initialize if in browser environment
if (typeof document !== 'undefined') {
    window.socialSharing = new SocialSharingManager();
    console.log('üì± Global social sharing manager ready!');
}

console.log('üì± Social Sharing module loaded successfully!');